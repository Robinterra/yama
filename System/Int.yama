namespace "System"
{
    /**
    * Integer current 16 Bit
    */
    public primitive class int
    {

        // -----------------------------------------------

        #region operator

        // -----------------------------------------------

        #region compare

        // -----------------------------------------------

        /**
        * Compare 2 Values to  Less than
        *
        * @param[in] a (Int) Der Linke Child der vom Operator steht
        * @param[in] b (Int) Der Rechte Child der vom Operator steht
        *
        * @return (bool) Wenn a kleiner ist dann true ansonsten false
        */
        copy operator bool <(int a, int b)
        {
            #defalgo IntCompare,LessThan:
        }

        // -----------------------------------------------

        /**
        * Compare 2 Values to Greater than
        *
        * @param[in] a (Int) Der Linke Child der vom Operator steht
        * @param[in] b (Int) Der Rechte Child der vom Operator steht
        *
        * @return (bool) Wenn a kleiner ist dann true ansonsten false
        */
        copy operator bool >(int a, int b)
        {
            #defalgo IntCompare,GreaterThan:
        }

        // -----------------------------------------------

        /**
        * Compare 2 Values to Greater than or equals
        *
        * @param[in] a (Int) Der Linke Child der vom Operator steht
        * @param[in] b (Int) Der Rechte Child der vom Operator steht
        *
        * @return (bool) Wenn a kleiner ist dann true ansonsten false
        */
        copy operator bool >=(int a, int b)
        {
            #defalgo IntCompare,GreaterEqualsThan:
        }

        // -----------------------------------------------

        /**
        * Compare 2 Values to Equal or Less than
        *
        * @param[in] a (Int) The left Child of the Operator
        * @param[in] b (Int) The rigth Child of the Operator
        *
        * @return (bool) if equals or Less than then return true
        */
        copy operator bool <=(int a, int b)
        {
            #defalgo IntCompare,LessEqualsThan:
        }

        // -----------------------------------------------

        /**
        * Compare 2 Values to Equal
        *
        * @param[in] a (Int) The left Child of the Operator
        * @param[in] b (Int) The rigth Child of the Operator
        *
        * @return (bool) if equals then return true
        */
        copy operator bool ==(int a, int b)
        {
            #defalgo IntCompare,Equals:
        }

        // -----------------------------------------------

        /**
        * Compare 2 Values to Not Equal
        *
        * @param[in] a (Int) The left Child of the Operator
        * @param[in] b (Int) The rigth Child of the Operator
        *
        * @return (bool) if equals then return true
        */
        copy operator bool !=(int a, int b)
        {
            #defalgo IntCompare,NotEquals:
        }

        // -----------------------------------------------

        #endregion compare

        // -----------------------------------------------

        #region BitOperations

        // -----------------------------------------------

        /**
        * Binary And of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int &(int a, int b)
        {
            #defalgo IntArimetics,BinaryAnd:
        }

        // -----------------------------------------------

        /**
        * Binary Or of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int |(int a, int b)
        {
            #defalgo IntArimetics,BinaryOr:
        }

        // -----------------------------------------------

        /**
        * Binary Negation of 2 Values
        *
        * @param[in] a (int) The Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int !(int a)
        {
            #defalgo IntArimetics,BinaryNegation:
        }

        // -----------------------------------------------

        /**
        * Binary Xor of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int ^(int a, int b)
        {
            #defalgo IntArimetics,BinaryXor:
        }

        // -----------------------------------------------

        /**
        * Binary Xor of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int <<(int a, int b)
        {
            #defalgo IntArimetics,BinaryLeftShift:
        }

        // -----------------------------------------------
        
        /**
        * Binary Xor of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int >>(int a, int b)
        {
            #defalgo IntArimetics,BinaryRightShift:
        }

        // -----------------------------------------------

        #endregion BitOperations

        // -----------------------------------------------

        #region arimetics

        // -----------------------------------------------

        /**
        * Subtraction of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int -(int a, int b)
        {

            #defalgo IntArimetics,Subtraction:
        }

        // -----------------------------------------------

        /**
        * Incrementation of one Operator
        *
        * @param[in] a (int) The Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int ++(int a)
        {
            #defalgo IntArimetics,Incremtation:
        }

        // -----------------------------------------------

        /**
        * Decrementation of one Operator
        *
        * @param[in] a (int) The Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int --(int a)
        {
            #defalgo IntArimetics,Decremtation:
        }

        // -----------------------------------------------

        /**
        * Addition of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int +(int a, int b)
        {
            #defalgo IntArimetics,Addition:
        }

        // -----------------------------------------------

        /**
        * Multiplcation of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int *(int a, int b)
        {
            #defalgo IntArimetics,Mul:
        }

        // -----------------------------------------------

        /**
        * Division of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int /(int a, int b)
        {
            #defalgo IntArimetics,Division:
        }

        // -----------------------------------------------

        /**
        * Modulus
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        public operator int %(int a, int b)
        {
            int result = (a / b) * b;

            return a - result;
        }

        // -----------------------------------------------

        #endregion arimetics

        // -----------------------------------------------

        #endregion operator

        // -----------------------------------------------

        public static IntParseResult Parse(string value)
        {
            int result = 0;
            int length = value.Length;

            for (int i = 0; i < length; i = i + 1)
            {
                int zeichen = value.Data[(length - i) - 1];
                if (zeichen < 0x30) return IntParseResult.Failed();
                if ((zeichen > 0x39) & (zeichen < 0x61)) return IntParseResult.Failed();
                if (zeichen > 0x66) return IntParseResult.Failed();

                int subtract = 0x30;
                if (zeichen > 0x60) subtract = 0x57;

                int current = zeichen - subtract;
                int movabel = 4 * i;
                current =  current << movabel;
                result = result + current;
            }

            return IntParseResult.Ok(result);
        }

        // -----------------------------------------------

        public static IntParseResult Parse(RefString value)
        {
            int result = 0;
            int length = value.Length;

            for (int i = 0; i < length; i = i + 1)
            {
                int zeichen = value.Data[(length - i) - 1];
                if (zeichen < 0x30) return IntParseResult.Failed();
                if ((zeichen > 0x39) & (zeichen < 0x61)) return IntParseResult.Failed();
                if (zeichen > 0x66) return IntParseResult.Failed();

                int subtract = 0x30;
                if (zeichen > 0x60) subtract = 0x57;

                int current = zeichen - subtract;
                int movabel = 4 * i;
                current =  current << movabel;
                result = result + current;
            }

            return IntParseResult.Ok(result);
        }

        // -----------------------------------------------

        public String ToString()
        {
            int length = 1;
            int number = this as int;
            number = number + 0;

            for (int count = 0; count != 8; count = count + 1)
            {
                int sheep = count << 2;
                int current = number >> sheep;

                if (current is null) break;
                if (count is null) continue;
                length = length + 1;
            }

            string result = string.New[length];

            for (int i = 0; length != 0; i = i + 1)
            {
                length = length - 1;

                int sheep = length << 2;
                int current = number >> sheep;

                int adder = 0x30;
                int segment = current & 0xf;
                if (segment > 9) adder = 0x57;
                result.Data[i] = adder + segment;
            }

            return new String(result);
        }

        // -----------------------------------------------

    }

    public struct IntParseResult
    {

        public bool IsSuccess;

        public int Result;

        public static IntParseResult Ok(int result)
        {
            Result.IsSuccess = true;
            Result.Result = result;

            return Result;
        }

        public static IntParseResult Failed()
        {
            Result.IsSuccess = false;

            return Result;
        }

        public this ~()
        {

        }

    }
}

// --[EOF]--