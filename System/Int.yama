namespace "System"
{
    /**
    * Integer current 16 Bit
    */
    public primitive class int
    {

        // -----------------------------------------------

        #region operator

        // -----------------------------------------------

        #region compare

        // -----------------------------------------------

        /**
        * Compare 2 Values to  Less than
        *
        * @param[in] a (Int) Der Linke Child der vom Operator steht
        * @param[in] b (Int) Der Rechte Child der vom Operator steht
        *
        * @return (bool) Wenn a kleiner ist dann true ansonsten false
        */
        copy operator bool <(int a, int b)
        {
            #defalgo IntCompare,LessThan:;
        }

        // -----------------------------------------------

        /**
        * Compare 2 Values to Greater than
        *
        * @param[in] a (Int) Der Linke Child der vom Operator steht
        * @param[in] b (Int) Der Rechte Child der vom Operator steht
        *
        * @return (bool) Wenn a kleiner ist dann true ansonsten false
        */
        copy operator bool >(int a, int b)
        {
            #defalgo IntCompare,GreaterThan:;
        }

        // -----------------------------------------------

        /**
        * Compare 2 Values to Greater than or equals
        *
        * @param[in] a (Int) Der Linke Child der vom Operator steht
        * @param[in] b (Int) Der Rechte Child der vom Operator steht
        *
        * @return (bool) Wenn a kleiner ist dann true ansonsten false
        */
        copy operator bool >=(int a, int b)
        {
            #defalgo IntCompare,GreaterEqualsThan:;
        }

        // -----------------------------------------------

        /**
        * Compare 2 Values to Equal or Less than
        *
        * @param[in] a (Int) The left Child of the Operator
        * @param[in] b (Int) The rigth Child of the Operator
        *
        * @return (bool) if equals or Less than then return true
        */
        copy operator bool <=(int a, int b)
        {
            #defalgo IntCompare,LessEqualsThan:;
        }

        // -----------------------------------------------

        /**
        * Compare 2 Values to Equal
        *
        * @param[in] a (Int) The left Child of the Operator
        * @param[in] b (Int) The rigth Child of the Operator
        *
        * @return (bool) if equals then return true
        */
        copy operator bool ==(int a, int b)
        {
            #defalgo IntCompare,Equals:;
        }

        // -----------------------------------------------

        /**
        * Compare 2 Values to Not Equal
        *
        * @param[in] a (Int) The left Child of the Operator
        * @param[in] b (Int) The rigth Child of the Operator
        *
        * @return (bool) if equals then return true
        */
        copy operator bool !=(int a, int b)
        {
            #defalgo IntCompare,NotEquals:;
        }

        // -----------------------------------------------

        #endregion compare

        // -----------------------------------------------

        #region BitOperations

        // -----------------------------------------------

        /**
        * Binary And of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int &(int a, int b)
        {
            #defalgo IntArimetics,BinaryAnd:;
        }

        // -----------------------------------------------

        /**
        * Binary Or of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int |(int a, int b)
        {
            #defalgo IntArimetics,BinaryOr:;
        }

        // -----------------------------------------------

        /**
        * Binary Negation of 2 Values
        *
        * @param[in] a (int) The Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int !(int a)
        {
            #defalgo IntArimetics,BinaryNegation:;
        }

        // -----------------------------------------------

        /**
        * Binary Xor of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int ^(int a, int b)
        {
            #defalgo IntArimetics,BinaryXor:;
        }

        // -----------------------------------------------

        /**
        * Binary Xor of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int <<(int a, int b)
        {
            #defalgo IntArimetics,BinaryLeftShift:;
        }

        // -----------------------------------------------
        
        /**
        * Binary Xor of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int >>(int a, int b)
        {
            #defalgo IntArimetics,BinaryRightShift:;
        }

        // -----------------------------------------------

        #endregion BitOperations

        // -----------------------------------------------

        #region arimetics

        // -----------------------------------------------

        /**
        * Subtraction of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int -(int a, int b)
        {

            #defalgo IntArimetics,Subtraction:;
        }

        // -----------------------------------------------

        /**
        * Incrementation of one Operator
        *
        * @param[in] a (int) The Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int ++(int a)
        {
            #defalgo IntArimetics,Incremtation:;
        }

        // -----------------------------------------------

        /**
        * Decrementation of one Operator
        *
        * @param[in] a (int) The Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int --(int a)
        {
            #defalgo IntArimetics,Decremtation:;
        }

        // -----------------------------------------------

        /**
        * Addition of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int +(int a, int b)
        {
            #defalgo IntArimetics,Addition:;
        }

        // -----------------------------------------------

        /**
        * Multiplcation of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int *(int a, int b)
        {
            #defalgo IntArimetics,Mul:;
        }

        // -----------------------------------------------

        /**
        * Division of 2 Values
        *
        * @param[in] a (int) The left Child of the Operator
        * @param[in] b (int) The rigth Child of the Operator
        *
        * @return (int) Result
        */
        copy operator int /(int a, int b)
        {
            #defalgo IntArimetics,Division:;
        }

        // -----------------------------------------------

        #endregion arimetics

        // -----------------------------------------------

        #endregion operator

        // -----------------------------------------------

    }
}

// --[EOF]--