namespace "System.Runtime.IO"
{
    using "System";
    using "System.IO";
    using "System.Collections";

    public class Stream
    {

        // -----------------------------------------------

        #region vars

        // -----------------------------------------------

        private ByteArray buffer;
        public bool IsReadable;
        public bool IsSeekable;
        public int ReadPosition;
        public int RealPosition;
        public int BufferLength;
        private bool unflushedChanges;

        // -----------------------------------------------

        #endregion vars

        // -----------------------------------------------

        #region ctor

        // -----------------------------------------------

        public this new()
        {
            this.buffer = ByteArray.New[0x180];

            return this;
        }

        // -----------------------------------------------

        public this ~ (  )
        {
            this.buffer = ~this.buffer;
        }

        // -----------------------------------------------

        #endregion ctor

        // -----------------------------------------------

        #region methods

        // -----------------------------------------------

        public bool Flush()
        {
            return false;
        }

        // -----------------------------------------------

        public bool Write(ByteArray input)
        {
            int bufferCounter = this.BufferLength;

            ByteArray buffer = this.buffer;
            for (int iCounter = 0; iCounter < input.Size; iCounter = iCounter + 1)
            {
                if (bufferCounter >= buffer.Size)
                {
                    this.BufferLength = bufferCounter;
                    this.Flush();
                    bufferCounter = 0;
                }

                int data = input.Data[iCounter];
                buffer.Data[bufferCounter] = data;
                bufferCounter = bufferCounter + 1;

                this.unflushedChanges = true;
            }

            this.BufferLength = bufferCounter;

            return true;
        }

        // -----------------------------------------------

        public bool Write(char sign)
        {
            int bufferCounter = this.BufferLength;

            ByteArray buffer = this.buffer;
            if (bufferCounter >= buffer.Size)
            {
                this.Flush();
                bufferCounter = 0;
            }

            buffer.Data[bufferCounter] = (sign) as int;
            this.BufferLength = bufferCounter + 1;

            this.unflushedChanges = true;
        }

        // -----------------------------------------------

        public bool Write(RefString input)
        {
            int bufferCounter = this.BufferLength;

            ByteArray buffer = this.buffer;
            for (int iCounter = 0; iCounter < input.Length; iCounter = iCounter + 1)
            {
                if (bufferCounter >= buffer.Size)
                {
                    this.BufferLength = bufferCounter;
                    this.Flush();
                    bufferCounter = 0;
                }

                int data = input.Data[iCounter];
                buffer.Data[bufferCounter] = data;
                bufferCounter = bufferCounter + 1;

                this.unflushedChanges = true;
            }

            this.BufferLength = bufferCounter;

            return true;
        }

        // -----------------------------------------------

        public bool Write(string input)
        {
            int bufferCounter = this.BufferLength;

            ByteArray buffer = this.buffer;
            for (int iCounter = 0; iCounter < input.Length; iCounter = iCounter + 1)
            {
                if (bufferCounter >= buffer.Size)
                {
                    this.BufferLength = bufferCounter;
                    this.Flush();
                    bufferCounter = 0;
                }

                int data = input.Data[iCounter];
                buffer.Data[bufferCounter] = data;
                bufferCounter = bufferCounter + 1;

                this.unflushedChanges = true;
            }

            this.BufferLength = bufferCounter;

            return true;
        }

        // -----------------------------------------------

        public ByteArray? ReadUntil(Func<bool, InternalStreamReadUntil> preDelg)
        {
            &Stream stream = (this) as Stream;
            InternalStreamReadUntil result = InternalStreamReadUntil.Init(this.ReadPosition, stream);

            while (this.ReadNextByteUntil(result))
            {
                if (preDelg(result)) continue;

                int length = this.ReadPosition - result.lastReadedPosition;
                result.Append(this.buffer, result.lastReadedPosition, length);

                return result.Daten;
            }

            ByteArray array = result.Daten;
            if (array is null) return null;

            Func<bool, Stream> holder = preDelg;
            array = ~array;

            return null;
        }

        // -----------------------------------------------

        private bool ReadNextByteUntil(InternalStreamReadUntil result)
        {
            this.ReadPosition = this.ReadPosition + 1;
            if (this.ReadPosition < this.BufferLength) return true;
            if (this.BufferLength == 0) return this.ReadNext();

            int lastReadedPosition = result.lastReadedPosition;

            result.Append(this.buffer, lastReadedPosition, this.BufferLength - lastReadedPosition);

            result.lastReadedPosition = 0;

            return this.ReadNext();
        }

        // -----------------------------------------------

        public RefString GetCurrentBuffer()
        {
            Result.Source = this.buffer as string;
            Result.Start = 0;
            Result.Length = this.BufferLength;

            return Result;
        }

        // -----------------------------------------------

        public bool ReadNextByte()
        {
            this.ReadPosition = this.ReadPosition + 1;
            if (this.ReadPosition < this.BufferLength) return true;

            return this.ReadNext();
        }

        // -----------------------------------------------

        public int ReadCurrentByte()
        {
            int readPos = this.ReadPosition;

            ByteArray buffer = this.buffer;
            int result = buffer.Data[readPos];

            return result;
        }

        // -----------------------------------------------

        public bool Seek(int position)
        {
            return false;
        }

        // -----------------------------------------------

        public bool ReadNext()
        {
            return false;
        }

        // -----------------------------------------------

        #endregion methods

        // -----------------------------------------------

    }

    public struct InternalStreamReadUntil
    {
        public ByteArray Daten;
        public int State;
        public &Stream Stream;
        private int lastReadedPosition;

        public this ~()
        {

        }

        public static InternalStreamReadUntil Init(int readPos, &Stream stream)
        {
            Result.Daten = (null) as ByteArray;
            Result.lastReadedPosition = readPos;
            Result.State = 0;
            Result.Stream = stream;

            return Result;
        }

        public bool Append(ByteArray buffer, int start, int length)
        {
            ByteArray daten = this.Daten;
            int startOnDaten = 0;

            if (daten is null)
            {
                daten = ByteArray.New[length];
            }
            else
            {
                daten = this.CreateNewDaten(daten, length);
            }

            ByteArray.Copy(daten, buffer, startOnDaten, start, length);
            this.Daten = daten;

            return true;
        }

        public ByteArray CreateNewDaten(ByteArray daten, int appendSize)
        {
            ByteArray newDaten = ByteArray.New[daten.Size + appendSize];

            ByteArray.Copy(newDaten, daten, 0, 0, daten.Size);

            ByteArray holding = ~daten;

            return newDaten;
        }

    }
}

// --[EOF]--