namespace "System.Runtime"
{
    using "System";

    public static class InputOutput
    {

        // -----------------------------------------------

        #region methods

        // -----------------------------------------------

        public static int ExecWith2Args ( int cmd, int argone, int argtwo, int guide )
        {
            #defalgo Exec,CallTwoArg:
        }

        // -----------------------------------------------

        public static int ExecWith1Arg ( int cmd, int argone, int guide )
        {
            #defalgo Exec,CallOneArg:
        }

        // -----------------------------------------------

        public static int Fork()
        {
            #defalgo Exec,Fork:
        }

        // -----------------------------------------------

        public static bool Exit(int returncode)
        {
            bool result = #defalgo Exec,Exit:;

            return result;
        }

        // -----------------------------------------------

        /**
         * fileflags und filemodes gibt es enums
         * Gibt die FileId zurück
         */
        public static int OpenFile(string filename, int fileflags, int fileModes)
        {
            int fileId = #defalgo Exec,OpenFile:;

            return fileId;
        }

        // -----------------------------------------------

        public static int WaitPid(int pid, int fileflags, int fileModes)
        {
            int returncode = #defalgo Exec,WaitPid:;

            return returncode;
        }

        // -----------------------------------------------

        public static int Kill(int pid, int sig)
        {
            int rc = #defalgo Exec,Kill:;

            return rc;
        }

        // -----------------------------------------------

        /**
         * Gibt die geschriebenen Bytes zurück
         */
        public static int Write(int fileId, ByteArray data, int length)
        {
            int writedBytes = #defalgo Exec,Write:;

            return writedBytes;
        }

        // -----------------------------------------------

        public static int Seek(int fileId, int offset, int whence)
        {
            int resultOffsetFromBeginningOfTheFile = #defalgo Exec,Seek:;

            return resultOffsetFromBeginningOfTheFile;
        }

        // -----------------------------------------------

        /**
         * Gibt die gelesenden Bytes zurück
         */
        public static int Read(int fileId, ByteArray buffer)
        {
            int readedBytes = #defalgo Exec,Read:;

            return readedBytes;
        }

        // -----------------------------------------------

        /**
         * returend True on Success
         */
        public static bool Close(int fileId)
        {
            bool issucess = #defalgo Exec,Close:;

            return !issucess;
        }

        // -----------------------------------------------

        public static int Wait4(int pid, int options)
        {
            int returncode = #defalgo Exec,Wait4:;

            return returncode;
        }

        // -----------------------------------------------

        public static int Mmap2(int fileId, int adresse)
        {
            int virtuelAdress = #defalgo Exec,Mmap2:;

            return virtuelAdress;
        }


        // -----------------------------------------------

        public static DateTime Time()
        {
            int epochTime = #defalgo Exec,Time:;

            return epochTime as DateTime;
        }

        // -----------------------------------------------

        /**
         * Print int
         */
        public static bool WriteFileData ( string filename, int data )
        {
            InputOutput.ExecWith2Args ( 2, filename as int, data, 6 );
        }

        // -----------------------------------------------

        /**
         * Print int
         */
        public static bool WriteFileObject ( string filename, int data )
        {
            InputOutput.ExecWith2Args ( 1, filename as int, data, 6 );
        }

        // -----------------------------------------------

        /**
         * Print int
         */
        public static int ReadFileObject ( string filename )
        {
            InputOutput.ExecWith1Arg ( 3, filename as int, 6 );
        }

        // -----------------------------------------------

        /**
         * Print int
         */
        public static int ReadFileData ( string filename )
        {
            InputOutput.ExecWith1Arg ( 4, filename as int, 6 );
        }

        // -----------------------------------------------

        public static bool Exist ( string filename )
        {
            InputOutput.ExecWith1Arg ( 5, filename as int, 6 );
        }

        // -----------------------------------------------

        #endregion methods

        // -----------------------------------------------

    }

}

// --[EOF]--