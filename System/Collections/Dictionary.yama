namespace "System.Collections"
{
    using "System";
    using "System.IO";

    public struct KeyValuePair
    {
        public Any Key;
        public Any Value;
        public bool IsEmptyEntry;

        public static KeyValuePair Init(Any key, Any value)
        {
            Result.Key = key;
            Result.Value = value;
            Result.IsEmptyEntry = false;

            return Result;
        }

        public static KeyValuePair Nothing()
        {
            Result.IsEmptyEntry = true;
            Result.Key = null;
            Result.Value = null;

            return Result;
        }

        public this ~()
        {

        }
    }

    public class Dictionary<TItem>
    {

        #region get/set

        private Array keyArray;
        private Array valueArray;
        public int Length;
        private bool isPrimitiv;
        private Func<int, Any> GetHashCodeDelegate;
        private Func<bool, Any, Any> CheckEquals;

        #endregion get/set

        #region ctor

        public this new()
        {
            this.Length = 0x10;
            this.keyArray = Array.New[0x10];
            this.valueArray = Array.New[0x10];
            this.isPrimitiv = false;
            this.GetHashCodeDelegate = (Dictionary.GetHashCodeReference) as Func;
            this.CheckEquals = (Dictionary.DefaultEqualsCheck) as Func;

            return this;
        }

        public this ~()
        {
            int length = this.Length;
            Array valueArray = this.valueArray;

            for (int i = 0; i < length; i = i + 1)
            {
                object obj = (valueArray.Data[i]) as object;
            }

            valueArray = ~valueArray;

            Array keyArray = this.keyArray;

            if (!this.isPrimitiv)
            {
                for (int j = 0; j < length; j = j + 1)
                {
                    object obj = (keyArray.Data[j]) as object;
                }
            }

            keyArray = ~keyArray;
        }

        #endregion ctor

        #region methods

        private static bool DefaultEqualsCheck(&object left, &object right)
        {
            if (left is null) return false;
            if (right is null) return false;

            bool isequal = left.Equals(right);

            return isequal;
        }

        private static bool StringEqualsCheck(string left, string right)
        {
            bool isequal = left == right;

            return isequal;
        }

        private static int GetHashCodeReference(Any data)
        {
            &object obj = data as object;
            int hashResult = obj.GetHashCode();
            //int hashResult = data as int;
            //hashResult = hashResult >> 2;
            //hashResult = hashResult & 0xf;

            return hashResult;
        }

        private static int GetHashCodePrimitivString(string primitivString)
        {
            int length = primitivString.Length;
            int hashResult = 0;
            for (int i = 0; i < length; i = i + 1)
            {
                int charValue = primitivString.Data[i];
                hashResult = hashResult + charValue;
                hashResult = hashResult * charValue;
                hashResult = hashResult & 0xf;
            }

            return hashResult;
        }

        public KeyValuePair GetFromIteration(int pos)
        {
            Array valueArray = this.valueArray;
            Any value = valueArray.Data[pos];

            Array keyArray = this.keyArray;
            Any key = keyArray.Data[pos];
            if (key is null) return KeyValuePair.Nothing();

            return KeyValuePair.Init(key, value);
        }

        public KeyValuePair Get(Any key)
        {
            Func<int, Any> getHashCode = (this.GetHashCodeDelegate) as Func;

            for (int hashCode = getHashCode(key); hashCode < this.Length; hashCode = hashCode + 0x10)
            {
                Array keyArray = this.keyArray;
                Any keyValue = keyArray.Data[hashCode];
                Func<bool, Any, Any> equalsCheck = (this.CheckEquals) as Func;
                bool isequal = equalsCheck(key, keyValue);
                if (!isequal) continue;

                Array valueArray = this.valueArray;
                Any value = valueArray.Data[hashCode];

                return KeyValuePair.Init(keyValue, value);
            }

            Any tkey = key;//todo: remove this line, bug in Registerallocater

            return KeyValuePair.Nothing();
        }

        public bool Add(Any key, TItem item)
        {
            Func<int, Any> getHashCode = (this.GetHashCodeDelegate) as Func;
            int hashCode = getHashCode(key);

            Array keyArray = this.keyArray;
            Any currentContent = keyArray.Data[hashCode];
            while (currentContent isnot null)
            {
                hashCode = hashCode + 0x10;
                if (hashCode >= this.Length) this.Grow();

                currentContent = keyArray.Data[hashCode];
            }

            int newValue = item as int;
            Array valueArray = this.valueArray;
            valueArray.Data[hashCode] = newValue;

            keyArray.Data[hashCode] = (key) as int;

            return true;
        }

        public bool Remove(Any key)
        {
            Func<int, Any> getHashCode = (this.GetHashCodeDelegate) as Func;

            for (int hashCode = getHashCode(key); hashCode < this.Length; hashCode = hashCode + 0x10)
            {
                Array keyArray = this.keyArray;
                Any keyValue = keyArray.Data[hashCode];
                Func<bool, Any, Any> equalsCheck = (this.CheckEquals) as Func;
                bool isequal = equalsCheck(key, keyValue);
                if (!isequal) continue;

                Array valueArray = this.valueArray;
                object obj = (valueArray.Data[hashCode]) as object;
                valueArray.Data[hashCode] = null;

                return true;
            }

            Any tkey = key;//todo: remove this line, bug in Registerallocater

            return false;
        }

        private bool Grow()
        {
            Array keyArray = this.keyArray;

            int orgSize = keyArray.Size;
            int newSize = orgSize + 0x10;

            Array newArray = Array.New[newSize];

            Array.Copy(newArray, keyArray, 0, 0, orgSize);
            this.keyArray = newArray;

            keyArray = ~keyArray;

            Array valueArray = this.valueArray;

            newArray = Array.New[newSize];

            Array.Copy(newArray, valueArray, 0, 0, orgSize);
            this.valueArray = newArray;

            valueArray = ~valueArray;

            this.Length = this.Length + 0x10;

            return true;
        }

        #endregion methods

    }
}