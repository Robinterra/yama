namespace "System.Collections"
{
    using "System";
    using "System.IO";

    public class List<TItem>
    {

        #region vars

        private Array array;
        public int Length;
        private bool isPrimitiv;

        #endregion vars

        #region get/set

        /*public &TItem? Data[int pos]
        {
            get
            {
                if (pos >= this.Length) return null;

                return this.array.Data[pos];
            }
            set
            {
                if (pos >= this.Length) return null;

                this.array.Data[pos] = (value) as int;
            }
        }*/

        #endregion get/set

        #region ctor

        public this new()
        {
            this.Length = 0;
            this.array = Array.New[16];
            this.isPrimitiv = false;

            return this;
        }

        public this ~()
        {
            int length = this.Length;
            Array array = this.array;

            if (!this.isPrimitiv)
            {
                for (int i = 0; i < length; i = i + 1)
                {
                    object obj = (array.Data[i]) as object;
                }
            }

            array = ~array;
        }

        #endregion ctor

        #region methods

        public &TItem? Get(int pos)
        {
            if (pos >= this.Length) return null;

            return this.array.Data[pos];
        }

        public TItem? GetOwner(int pos)
        {
            if (pos >= this.Length) return null;

            &TItem item = (this.array.Data[pos]) as TItem;
            if (item is null) return null;

            TItem result = this.Remove(item);

            return result;
        }

        public &TItem? Find(Func<bool, TItem> preDelg)
        {
            int length = this.Length;
            for (int i = 0; i < length; i = i + 1)
            {
                &TItem data = this.Get(i);
                if (data is null) continue;
                if (preDelg(data)) return data;
            }

            return null;
        }

        public List Where(Func<bool, TItem> preDelg)
        {
            List<TItem> result = new List<TItem>();
            result.isPrimitiv = true;
            int length = this.Length;
            for (int i = 0; i < length; i = i + 1)
            {
                &TItem data = this.Get(i);
                if (data is null) continue;
                bool isok = preDelg(data);
                if (!isok) continue;

                //TItem ownerData = this.GetOwner(i);
                //result.Add(ownerData);
                result.Add(data);
            }

            return result;
        }

        public int Add(TItem item?)
        {
            int orgLength = this.Length;
            this.Length = orgLength + 1;

            Array array = this.array;
            int arraySize = array.size >> 2;

            if (this.Length == arraySize) this.Grow();

            int value = (item) as int;
            array = this.array;
            array.Data[orgLength] = value;

            return orgLength;
        }

        public int AtPosition(TItem item)
        {
            int length = this.Length;
            Array array = this.array;
            for (int i = 0; i < length; i = i + 1)
            {
                int existPointer = (array.Data[i]) as int;
                if (existPointer == item) return i;
            }

            return -1;
        }

        public bool Contains(TItem item)
        {
            int length = this.Length;
            Array array = this.array;
            for (int i = 0; i < length; i = i + 1)
            {
                int existPointer = (array.Data[i]) as int;
                if (existPointer == item) return true;
            }

            return false;
        }

        public TItem? Remove(&TItem item)
        {
            int length = this.Length;
            Array array = this.array;
            for (int i = 0; i < length; i = i + 1)
            {
                int existPointer = (array.Data[i]) as int;
                if (existPointer != item) continue;

                int newStart = i + 1;
                Array.Copy(array, array, i, newStart, length - newStart);
                this.Length = length - 1;

                return existPointer;
            }

            return null;
        }

        private bool Grow()
        {
            Array orgarray = this.array;

            int orgSize = orgarray.Size;
            int newSize = orgSize + 16;

            Array newArray = Array.New[newSize];

            Array.Copy(newArray, orgarray, 0, 0, orgSize);
            this.array = newArray;

            orgarray = ~orgarray;

            return true;
        }

        #endregion methods
    }

}