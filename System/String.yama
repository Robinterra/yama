namespace "System"
{

    using "System.IO";
    using "System.Collections";

    /**
    * string
    */
    public primitive class string
    {
        #region vars

        public int Length;

        #endregion vars

        #region get/set

        public int Data[int index]
        {
            get
            {
                if (index > this.Length) return 1;

                int clean = 4 + index + this as int;
                int bits = clean & 0x3;

                int address = clean ^ bits;
                Pointer pointer = address as Pointer;

                bits = index & 0x3;

                clean = pointer.Value;
                clean = clean >> (bits << 0x3);

                return clean & 0xFF;
            }
            set
            {
                if (index > this.Length) return 0;

                value = value & 0xff;

                int clean = 4 + index + this as int;
                int bits = clean & 0x3;
                int address = clean ^ bits;
                Pointer pointer = address as Pointer;

                bits = bits << 0x3;
                value = value << bits;
                bits = 0xff << bits;

                pointer.Value = bits ^ (pointer.Value | bits);
                pointer.Value = pointer.Value | value;
            }
        }

        #endregion get/set

        #region ctor

        public static string New[int size]
        {
            get
            {
                int sizeOnDisk = size + 4;
                if (sizeOnDisk & 0x3)
                {
                    sizeOnDisk = sizeOnDisk | 0x3;
                    sizeOnDisk = 4 + (sizeOnDisk ^ 0x3);
                }
                else
                {
                    sizeOnDisk = sizeOnDisk + 4;
                }

                string str = (MemoryManager.Malloc ( sizeOnDisk )) as string;
                str.Length = size;

                return str;
            }
            set {}
        }

        #endregion ctor

        #region operators

        public operator String +(string a, string b)
        {
            int size = a.Length + b.Length;
            string newString = string.New[size];

            ByteArray.Copy(newString as ByteArray, a as ByteArray, 0, 0, a.Length);
            ByteArray.Copy(newString as ByteArray, b as ByteArray, a.Length, 0, b.Length);

            return new String(newString);
        }

        public operator bool ==(string a, string b)
        {
            int length = a.Length;
            if (length != b.Length) return false;


            for (int i = 0; i < length; i = i + 1)
            {
                int valueA = a.Data[i];
                int valueB = b.Data[i];
                if (valueA != valueB) return false;
            }

            return true;
        }

        // -----------------------------------------------

        public operator bool !=(string a, string b)
        {
            int length = a.Length;
            if (length != b.Length) return true;


            for (int i = 0; i < length; i = i + 1)
            {
                int valueA = a.Data[i];
                int valueB = b.Data[i];
                if (valueA != valueB) return true;
            }

            return false;
        }

        // -----------------------------------------------

        #endregion operators

        public static String Concat(string a, string b, string c)
        {
            String cat1 = a + b;
            String result = cat1.Content + c;

            return result;
        }

    }

    public struct RefString
    {
        #region vars

        public string Source;
        public int Start;
        public int Length;

        #endregion vars

        #region get/set

        public int Data[int index]
        {
            get
            {
                if (index > this.Length) return 1;

                int start = this.Start;
                int targetIndex = index + start;
                string source = this.Source;
                int result = source.Data[targetIndex];

                return result;
            }
            set
            {
                if (index > this.Length) return 0;

                int start = this.Start;
                int targetIndex = index + start;

                string source = this.Source;
                source.Data[targetIndex] = value;
            }
        }

        #endregion get/set

        #region ctor

        public this ~()
        {
            return null;
        }

        #endregion ctor

        #region methods

        // -----------------------------------------------

        public static RefString Pack(string source)
        {
            Result.Source = source;
            Result.Start = 0;
            Result.Length = source.Length;

            return Result;
        }

        // -----------------------------------------------

        public RefString Substring(int start, int length)
        {
            Result.Source = this.Source;
            Result.Start = this.Start + start;
            Result.Length = length;

            return Result;
        }

        // -----------------------------------------------

        public String ToString()
        {
            int size = this.Length;
            string newString = string.New[size];

            string a = this.Source;
            int start = this.Start;
            ByteArray.Copy(newString as ByteArray, a as ByteArray, 0, start, size);

            return new String(newString);
        }

        // -----------------------------------------------

        public bool Equals(string b)
        {
            int length = this.Length;
            if (length != b.Length) return false;


            for (int i = 0; i < length; i = i + 1)
            {
                int valueA = this.Data[i];
                int valueB = b.Data[i];
                if (valueA != valueB) return false;
            }

            return true;
        }

        // -----------------------------------------------

        public bool NotEquals(string b)
        {
            int length = this.Length;
            if (length != b.Length) return true;

            for (int i = 0; i < length; i = i + 1)
            {
                int valueA = this.Data[i];
                int valueB = b.Data[i];
                if (valueA != valueB) return true;
            }

            return false;
        }

        // -----------------------------------------------

        public bool Equals(RefString b)
        {
            int length = this.Length;
            if (length != b.Length) return false;


            for (int i = 0; i < length; i = i + 1)
            {
                int valueA = this.Data[i];
                int valueB = b.Data[i];
                if (valueA != valueB) return false;
            }

            return true;
        }

        // -----------------------------------------------

        public bool NotEquals(RefString b)
        {
            int length = this.Length;
            if (length != b.Length) return true;


            for (int i = 0; i < length; i = i + 1)
            {
                int valueA = this.Data[i];
                int valueB = b.Data[i];
                if (valueA != valueB) return true;
            }

            return false;
        }

        // -----------------------------------------------

        #endregion methods

    }

    public class String
    {

        public string Content;

        #region ctor

        public this new(string content)
        {
            this.Content = content;
        }

        public this ~()
        {
            string content = this.Content;
            if (content is null) return null;

            MemoryManager.Free(content as int);

            return null;
        }

        #endregion ctor

    }

}